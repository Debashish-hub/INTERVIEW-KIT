long long getMaxArea(long long hist[], int n)
    {
        // Your code here
        stack<long long> s; 
  
        long long max_area = 0;  
        long long tp;  
        long long area_with_top; 
      
        long long i = 0; 
        
        //traversing the array.
        while (i < n) 
        { 
            //if current bar is greater than or equal to bar on top 
            //of stack, we push the index into stack. 
            if (s.empty() || hist[s.top()] <= hist[i]) 
                s.push(i++); 
      
            //if current bar is lower than bar on top of stack, we calculate
            //area of rectangle with top of stack as the smallest bar.  
            //i is rightindex for top and element before top in stack is leftindex
            else
            { 
                tp = s.top();  
                //popping the top element of stack.
                s.pop();  
      
                //calculating the area with hist[tp] stack as smallest bar. 
                area_with_top=hist[tp]*(s.empty()? i :i-s.top()-1); 
      
                //updating maximum area, if needed. 
                if (max_area < area_with_top) 
                    max_area = area_with_top; 
            } 
        } 
      
        //now popping the remaining bars from stack and calculating 
        //area with every popped bar as the smallest bar.
        while (s.empty() == false) 
        { 
            tp = s.top(); 
            s.pop(); 
            
            area_with_top=hist[tp]*(s.empty()? i :i-s.top()-1); 
      
            //updating maximum area, if needed. 
            if (max_area < area_with_top) 
                max_area = area_with_top; 
        } 
        //returning the maximum area.
        return max_area; 
    
    }